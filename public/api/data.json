{
    "project": {
        "name": "Ember Touch API",
        "description": "Ember Touch API: a lightweight library for building and using touch gestures",
        "version": "0.1"
    },
    "files": {
        "../packages/ember-touch/lib/gesture_recognizers/pan.js": {
            "name": "../packages/ember-touch/lib/gesture_recognizers/pan.js",
            "modules": {
                "ember-touch": 1
            },
            "classes": {
                "Ember.PanGestureRecognizer": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/gesture_recognizers/pinch.js": {
            "name": "../packages/ember-touch/lib/gesture_recognizers/pinch.js",
            "modules": {},
            "classes": {
                "Ember.PinchGestureRecognizer": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/gesture_recognizers/press.js": {
            "name": "../packages/ember-touch/lib/gesture_recognizers/press.js",
            "modules": {},
            "classes": {
                "Ember.PressGestureRecognizer": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/gesture_recognizers/swipe.js": {
            "name": "../packages/ember-touch/lib/gesture_recognizers/swipe.js",
            "modules": {},
            "classes": {
                "Ember.SwipeGestureRecognizer": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/gesture_recognizers/tap.js": {
            "name": "../packages/ember-touch/lib/gesture_recognizers/tap.js",
            "modules": {},
            "classes": {
                "Ember.TapGestureRecognizer": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/gesture_recognizers/touch_hold.js": {
            "name": "../packages/ember-touch/lib/gesture_recognizers/touch_hold.js",
            "modules": {},
            "classes": {
                "Ember.TouchHoldGestureRecognizer": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/system/application_gesture_manager.js": {
            "name": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "modules": {},
            "classes": {
                "Ember.ApplicationGestureManager": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/system/gesture.js": {
            "name": "../packages/ember-touch/lib/system/gesture.js",
            "modules": {},
            "classes": {
                "Ember.Gesture": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/system/gesture_delegate.js": {
            "name": "../packages/ember-touch/lib/system/gesture_delegate.js",
            "modules": {},
            "classes": {
                "Ember.GestureDelegate": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/system/gesture_delegate_rule.js": {
            "name": "../packages/ember-touch/lib/system/gesture_delegate_rule.js",
            "modules": {},
            "classes": {
                "Ember.GestureDelegateRule": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/system/gesture_manager.js": {
            "name": "../packages/ember-touch/lib/system/gesture_manager.js",
            "modules": {},
            "classes": {
                "Ember.GestureManager": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/system/view_ext.js": {
            "name": "../packages/ember-touch/lib/system/view_ext.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../packages/ember-touch/lib/utils/timeout_touch_event.js": {
            "name": "../packages/ember-touch/lib/utils/timeout_touch_event.js",
            "modules": {},
            "classes": {
                "Ember.TimeoutTouchEvent": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/utils/touch_list.js": {
            "name": "../packages/ember-touch/lib/utils/touch_list.js",
            "modules": {},
            "classes": {
                "Ember.TouchList": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "../packages/ember-touch/lib/main.js": {
            "name": "../packages/ember-touch/lib/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "ember": {
            "name": "ember",
            "submodules": {
                "ember-touch": 1
            },
            "classes": {
                "Ember.PanGestureRecognizer": 1,
                "Ember.PinchGestureRecognizer": 1,
                "Ember.PressGestureRecognizer": 1,
                "Ember.SwipeGestureRecognizer": 1,
                "Ember.TapGestureRecognizer": 1,
                "Ember.TouchHoldGestureRecognizer": 1,
                "Ember.ApplicationGestureManager": 1,
                "Ember.Gesture": 1,
                "Ember.GestureDelegate": 1,
                "Ember.GestureDelegateRule": 1,
                "Ember.GestureManager": 1,
                "Ember.TimeoutTouchEvent": 1,
                "Ember.TouchList": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            },
            "file": "../packages/ember-touch/lib/utils/touch_list.js",
            "line": 7
        },
        "ember-touch": {
            "name": "ember-touch",
            "submodules": {},
            "classes": {
                "Ember.PanGestureRecognizer": 1,
                "Ember.PinchGestureRecognizer": 1,
                "Ember.PressGestureRecognizer": 1,
                "Ember.SwipeGestureRecognizer": 1,
                "Ember.TapGestureRecognizer": 1,
                "Ember.TouchHoldGestureRecognizer": 1,
                "Ember.ApplicationGestureManager": 1,
                "Ember.Gesture": 1,
                "Ember.GestureDelegate": 1,
                "Ember.GestureDelegateRule": 1,
                "Ember.GestureManager": 1,
                "Ember.TouchList": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "../packages/ember-touch/lib/utils/touch_list.js",
            "line": 7,
            "description": "A lightweight library for building and using touch gestures with Ember Applications",
            "tag": "main",
            "itemtype": "main"
        }
    },
    "classes": {
        "Ember.PanGestureRecognizer": {
            "name": "Ember.PanGestureRecognizer",
            "shortname": "Ember.PanGestureRecognizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/gesture_recognizers/pan.js",
            "line": 10,
            "description": "Recognizes a multi-touch pan gesture. Pan gestures require a specified number\nof fingers to move. It will record and update the center point between the\ntouches.\n\nFor panChange events, the pan gesture recognizer includes a translation\nproperty which can be applied as a CSS transform directly. Translation values\nare hashes which contain an x and a y value.\n\n    var myview = Em.View.create({\n      elementId: 'gestureTest',\n\n      panChange: function(rec, evt) {\n        var val = rec.get('translation');\n        this.$().css({\n          translateX: '%@=%@'.fmt((val.x < 0)? '-' : '+',Math.abs(val.x)),\n          translateY: '%@=%@'.fmt((val.y < 0)? '-' : '+',Math.abs(val.y))\n        });\n      }\n    });\n\nThe number of touches required to start the gesture can be specified with the\n_numberOfRequiredTouches_ property. This property can be set in the panOptions\nhash.\n\n    var myview = Em.View.create({\n      panOptions: {\n        numberOfRequiredTouches: 2\n      }\n    });",
            "extends": "Em.Gesture"
        },
        "Ember.PinchGestureRecognizer": {
            "name": "Ember.PinchGestureRecognizer",
            "shortname": "Ember.PinchGestureRecognizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/gesture_recognizers/pinch.js",
            "line": 9,
            "description": "Recognizes a multi-touch pinch gesture. Pinch gestures require a specified\nnumber of fingers to move and will record and update the scale.\n\nFor pinchChange events, the pinch gesture recognizer includes a scale property\nwhich can be applied as a CSS transform directly.\n\n    var myview = Em.View.create({\n      elementId: 'gestureTest',\n\n      pinchChange: function(rec, evt) {\n        this.$().css('scale',function(index, value) {\n          return rec.get('scale') * value\n        });\n      }\n    });\n\nThe number of touches required to start the gesture can be specified with the\n_numberOfRequiredTouches_ property. This property can be set in the\npinchOptions hash.\n\n    var myview = Em.View.create({\n      pinchOptions: {\n        numberOfRequiredTouches: 3\n      }\n    });",
            "extends": "Em.Gesture"
        },
        "Ember.PressGestureRecognizer": {
            "name": "Ember.PressGestureRecognizer",
            "shortname": "Ember.PressGestureRecognizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/gesture_recognizers/press.js",
            "line": 10,
            "description": "Recognizes a multi-touch press gesture. Press gestures allow for a certain\namount of wiggle-room between a start and end of a touch, and requires a\nminimum hold period to be triggered. The press gesture also requires to\nstop touching the screen to be triggered.\n\nPress gestures are discrete so only _pressEnd_ will get fired.\n\n    var myview = Em.View.create({\n      elementId: 'gestureTest',\n\n      pressEnd: function(recognizer, evt) {\n\n      }\n    });\n\nThe number of touches required to start the gesture can be specified with the\n_numberOfRequiredTouches_ and _pressPeriodThreshold_ properties.\nThis properties can be set in the _pressHoldOptions_ hash:\n\n    var myview = Em.View.create({\n      pressOptions: {\n        pressPeriodThreshold: 500\n      }\n    });",
            "extends": "Em.Gesture"
        },
        "Ember.SwipeGestureRecognizer": {
            "name": "Ember.SwipeGestureRecognizer",
            "shortname": "Ember.SwipeGestureRecognizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/gesture_recognizers/swipe.js",
            "line": 9,
            "description": "Recognizes a swipe gesture in one or more directions.\n\nSwipes are continuous gestures that will get fired on a view.\n\n    var myview = Em.View.create({\n\n      swipeStart: function(recognizer, evt) {\n\n      },\n      swipeChange: function(recognizer, evt) {\n\n      },\n      // usually, you will only use this method\n      swipeEnd: function(recognizer, evt) {\n\n      },\n      swipeCancel: function(recognizer, evt) {\n\n      }\n    });\n\nSwipeGestureRecognizer recognizes a swipe when the touch has moved to a\n(direction) far enough (swipeThreshold) in a period (cancelPeriod).\nThe current implementation will only recognize a direction on swipeEnd on\n(recognizer.swipeDirection).\n\n    var myview = Em.View.create({\n      swipeOptions: {\n        direction: Em.OneGestureDirection.Left | Em.OneGestureDirection.Right,\n        cancelPeriod: 100,\n        swipeThreshold: 10\n      }\n    });",
            "extends": "Em.Gesture"
        },
        "Ember.TapGestureRecognizer": {
            "name": "Ember.TapGestureRecognizer",
            "shortname": "Ember.TapGestureRecognizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/gesture_recognizers/tap.js",
            "line": 9,
            "description": "Recognizes a multi-touch tap gesture. Tap gestures allow for a certain amount\nof wiggle-room between a start and end of a touch. Taps are discrete gestures\nso only tapEnd() will get fired on a view.\n\n    var myview = Em.View.create({\n      elementId: 'gestureTest',\n\n      tapEnd: function(recognizer, evt) {\n        $('#gestureTest').css('background','yellow');\n      }\n    });\n\nThe number of touches required to start the gesture can be specified with the\n_numberOfRequiredTouches_ property, which can be set in the tapOptions hash.\n\n    var myview = Em.View.create({\n      tapOptions: {\n        numberOfRequiredTouches: 3\n      }\n    });\n\nAnd the number of taps required to fire the gesture can be specified using the\n_numberOfTaps_ property.\n\n    var myview = Em.View.create({\n      tapOptions: {\n        numberOfTaps: 3,\n        delayBetweenTaps: 150\n      }\n    });",
            "extends": "Em.Gesture"
        },
        "Ember.TouchHoldGestureRecognizer": {
            "name": "Ember.TouchHoldGestureRecognizer",
            "shortname": "Ember.TouchHoldGestureRecognizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/gesture_recognizers/touch_hold.js",
            "line": 9,
            "description": "Recognizes a multi-touch touch and hold gesture.\n\nTouch and Hold gestures allow move the finger on the same view, and after\nthe user leaves its finger motionless during a specific period the end view\nevent is automatically triggered.\n\nTouchHold are discrete gestures so only _touchHoldEnd_ will get fired.\n\n    var myview = Em.View.create({\n      elementId: 'gestureTest',\n\n      touchHoldEnd: function(recognizer, evt) {\n\n      }\n    });\n\n\nThe number of touches required to start the gesture can be specified with the\nfollowing properties:\n- _numberOfRequiredTouches_\n- a minimum _holdPeriod_ the finger must be held to trigger the end event\n- _modeThreshold_ which allows to move the finger a specific number of pixels\nThis properties can be set in the touchHoldOptions\n\n    var myview = Em.View.create({\n      touchHoldOptions: {\n        holdPeriod: 500,\n        moveThreshold: 10\n      }\n    });",
            "extends": "Em.Gesture"
        },
        "Ember.ApplicationGestureManager": {
            "name": "Ember.ApplicationGestureManager",
            "shortname": "Ember.ApplicationGestureManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 8,
            "description": "An ApplicationGestureManager instance is registered into the container\nto inform `GestureManager` instances if touch events can\nbe dispatched and it stores application gestures and delegates.\n\n`GestureManager` instances deny dispatching events whenever the `isAllBlocked`\nproperty is true or `isBlocked` is true and the `shouldReceiveTouch` response\nis false.",
            "extends": "Em.Object"
        },
        "Ember.Gesture": {
            "name": "Ember.Gesture",
            "shortname": "Ember.Gesture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 8,
            "description": "Base class to be extended to define specific gesture recognizers. Handles low-level touch\nevents and state management. It also provides some utility methods to the extended classes.",
            "extends": "Ember.Object"
        },
        "Ember.GestureDelegate": {
            "name": "Ember.GestureDelegate",
            "shortname": "Ember.GestureDelegate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/system/gesture_delegate.js",
            "line": 6,
            "description": "GestureDelegate allows `GestureManager` instances decide\nif a touch event can be dispatched to a view gesture.\n\nGestures can be set up using a `GestureDelegate` to coordinate\nthe gesture recognition based on application logic.",
            "extends": "Ember.Object"
        },
        "Ember.GestureDelegateRule": {
            "name": "Ember.GestureDelegateRule",
            "shortname": "Ember.GestureDelegateRule",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/system/gesture_delegate_rule.js",
            "line": 5,
            "description": "Defines a rule on its `shouldReceiveTouch` method\nto be used by a `GestureDelegate` instance.",
            "extends": "Ember.Object"
        },
        "Ember.GestureManager": {
            "name": "Ember.GestureManager",
            "shortname": "Ember.GestureManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/system/gesture_manager.js",
            "line": 8,
            "description": "`Em.GestureManager` mainly acts as a composite for the multiple gesture\nrecognizers associated with a view.\n\nThis class is instantiated automatically by Em.View and it shouldn't be\ndirectly accessed.\n\nWhenever it gets a touch event, it relays it to the gestures when\ncoordination conditions are satisfied.\n\nThe other main resposibility of `Em.GestureManager` is to manage\nevent bubbling.",
            "extends": "Ember.Object"
        },
        "Ember.TimeoutTouchEvent": {
            "name": "Ember.TimeoutTouchEvent",
            "shortname": "Ember.TimeoutTouchEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/utils/timeout_touch_event.js",
            "line": 6,
            "description": "Based on custom  gestures implementation. A `TimeoutTouchEvent` event is\nnormally created to fire automatically after a given period of time.\nA view [gesture]Event which must be executed without being generated\nby an user touch event."
        },
        "Ember.TouchList": {
            "name": "Ember.TouchList",
            "shortname": "Ember.TouchList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember",
            "file": "../packages/ember-touch/lib/utils/touch_list.js",
            "line": 7,
            "description": "This component manages and maintains a list of active touches related\nto a gesture recognizer.",
            "extends": "Ember.Object",
            "access": "private",
            "tagname": ""
        }
    },
    "classitems": [
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/pan.js",
            "line": 47,
            "description": "The translation value which represents the current amount of movement that\nhas been applied to the view.",
            "type": "Location",
            "class": "Ember.PanGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/pan.js",
            "line": 56,
            "description": "The pixel distance that the fingers need to move before the gesture is\nrecognized.\nIt should be set depending on the device factor and view behaviors.\nDistance is calculated separately on vertical and horizontal directions\ndepending on the direction property.",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Ember.PanGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/pan.js",
            "line": 73,
            "description": "Used to measure offsets",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Ember.PanGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/pan.js",
            "line": 81,
            "description": "Used for rejected events",
            "access": "private",
            "tagname": "",
            "type": "Hash",
            "class": "Ember.PanGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/pinch.js",
            "line": 42,
            "description": "The scale value which represents the current amount of scaling that has\nbeen applied to the view.",
            "type": "Number",
            "class": "Ember.PinchGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/pinch.js",
            "line": 55,
            "description": "Track starting distance between touches per gesture.",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Ember.PinchGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/pinch.js",
            "line": 63,
            "description": "Used for measuring velocity",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Ember.PinchGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/pinch.js",
            "line": 71,
            "description": "Used for measuring velocity and scale",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Ember.PinchGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/pinch.js",
            "line": 79,
            "description": "The pixel distance that the fingers need to get closer/farther away by before\nthis gesture is recognized.",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Ember.PinchGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/pinch.js",
            "line": 88,
            "description": "Used for rejected events",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Ember.PinchGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/pinch.js",
            "line": 96,
            "access": "private",
            "tagname": "",
            "class": "Ember.PinchGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/press.js",
            "line": 42,
            "description": "The minimum period (ms) that the fingers must be held to recognize the gesture end.",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Ember.PressGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/press.js",
            "line": 52,
            "class": "Ember.PressGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/press.js",
            "line": 55,
            "class": "Ember.PressGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/press.js",
            "line": 58,
            "class": "Ember.PressGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/press.js",
            "line": 61,
            "class": "Ember.PressGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/swipe.js",
            "line": 50,
            "description": "The period (ms) in which the gesture should have been recognized.",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Ember.SwipeGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/swipe.js",
            "line": 78,
            "description": "The pixel distance that the fingers need to move before this gesture is\nrecognized.",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Ember.SwipeGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/tap.js",
            "line": 47,
            "description": "The translation value which represents the current amount of movement that\nhas been applied to the view.",
            "type": "Location",
            "class": "Ember.TapGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/tap.js",
            "line": 62,
            "class": "Ember.TapGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/tap.js",
            "line": 65,
            "class": "Ember.TapGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/tap.js",
            "line": 68,
            "class": "Ember.TapGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/tap.js",
            "line": 71,
            "class": "Ember.TapGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/touch_hold.js",
            "line": 48,
            "description": "The minimum period (ms) that the fingers must be held to trigger the event.",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Ember.TouchHoldGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/gesture_recognizers/touch_hold.js",
            "line": 61,
            "class": "Ember.TouchHoldGestureRecognizer",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 24,
            "description": "Access the list of application delegates registered.",
            "type": "GestureDelegates",
            "itemtype": "property",
            "name": "_gestures",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 33,
            "description": "Block application gesture recognition when true.",
            "itemtype": "property",
            "name": "isAllBlocked",
            "default": "false",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 40,
            "description": "Access the registered gestures in the application.",
            "itemtype": "property",
            "name": "_gestures",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 47,
            "description": "View which has blocked the recognizer. This is the\nonly view which can unblock the gesture recognition.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_blockerView",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 56,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_isBlocked",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 62,
            "description": "Whenever the `isBlocked` property is true, this function\nproperty decides if a touch event can be dispatched.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_shouldReceiveTouchFn",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 78,
            "description": "Register a new gesture in the application",
            "itemtype": "method",
            "name": "registerGesture",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 93,
            "itemtype": "method",
            "name": "unregisterGesture",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 104,
            "description": "Get the list of the application gestures",
            "itemtype": "method",
            "name": "knownGestures",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 113,
            "itemtype": "method",
            "name": "registerDelegate",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 120,
            "itemtype": "method",
            "name": "findDelegate",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 128,
            "itemtype": "property",
            "name": "isBlocked",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 138,
            "description": "Whenever the `isBlocked` property is true, the function output is provided\nto `GestureManager` instances to allow or deny dispatching touch events.",
            "itemtype": "method",
            "name": "shouldReceiveTouch",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 150,
            "description": "Blocks gesture recognition at the application level and setups\nwhich events can be dispatched based on the `shouldReceiveTouchFn` parameter.",
            "itemtype": "method",
            "name": "block",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/application_gesture_manager.js",
            "line": 168,
            "description": "Unblock current gesture blocking state.",
            "itemtype": "method",
            "name": "unblock",
            "class": "Ember.ApplicationGestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 18,
            "description": "The current state of the gesture recognizer. This value can be any of the\nfollowing:\n\n  WAITING_FOR_TOUCHES\n  POSSIBLE\n  BEGAN\n  CHANGED\n  ENDED\n  CANCELLED",
            "itemtype": "property",
            "name": "state",
            "type": "Number",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 34,
            "description": "A string to identify the gesture recognizer's name. This value is set automatically\nby Em.Gestures when a gesture is registered.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 43,
            "description": "View in which the gesture must be recognized.\nAssigned on startup.",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 49,
            "description": "Assigned on startup.",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 59,
            "description": "Specifies whether a gesture is discrete or continuous.",
            "itemtype": "property",
            "name": "gestureIsDiscrete",
            "type": "Boolean",
            "default": "false",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 69,
            "description": "This property enables to recognize gestures simultaneously. Whenever a gesture\nis being recognized and its `simultaneously` property is false, it denies other\ngestures to be recognized at the same time.",
            "itemtype": "property",
            "name": "simultaneously",
            "type": "Boolean",
            "default": "true",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 80,
            "description": "Used this property to assign a `GestureDelegate` instance to the `delegate` property\nin the `init` process.",
            "itemtype": "property",
            "name": "delegateName",
            "type": "String",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 89,
            "description": "Apply a `GestureDelegate` to customize an application's gesture-recognition behavior.",
            "itemtype": "property",
            "name": "delegate",
            "type": "Em.GestureDelegate",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 97,
            "description": "Use this property to disable the gesture recognition.\nUse isEnabledBinding to bind to global or view properties.",
            "itemtype": "property",
            "name": "isEnabled",
            "type": "Boolean",
            "default": "true",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 108,
            "description": "Manage and maintain a list of active touches related to a gesture recognizer.\n\nA gesture updates automatically its internal touch list\nto have only the last active touch events.\n\nCustom gestures may not interact with the `TouchList` methods,\nit is usually the gesture API which manages its touch list.\n\nCustom gestures usually access its length property and\nthe internal touch list to have information of the last\nactive touch events.",
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "touches",
            "type": "Em.TouchList",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 127,
            "description": "You can also use the numberOfActiveTouches property to inspect how many touches\nare active, this is mostly useful in `shouldBegin` since every other callback can\nassume that there are as many active touches as specified in the\n`numberOfRequiredTouches` property.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "numberOfActiveTouches",
            "type": "Number",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 139,
            "description": "Used to specify the number of touches required for the gesture to enter a possible\nstate",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "numberOfRequiredTouches",
            "type": "Number",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 173,
            "description": "Called when a gesture enters a possible state. This means the gesture\nrecognizer has accepted enough touches to match the number of required touches.\nUsually, the internal state is initialized in this callback.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "didBecomePossible",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 182,
            "description": "Called if a view returns false from a gesture event.\nThis callback allows to reset the internal state if the user\nrejects an event.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "didBegin",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 191,
            "description": "Called if a view returns false from a gesture event. This callback allows\n to reset the internal state if the user rejects an event.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "shouldBegin",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 201,
            "description": "Called when the gesture enters a began state.\nCalled before the view receives the Start event.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "didBegin",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 209,
            "description": "Called when the gesture enters a began state, and when one of the touches moves.\nCalled before the view receives the Change event.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "didChange",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 217,
            "description": "Allows a gesture to block itself from entering an ended state.\nThis callback gets called whenever a tracked touch gets a touchEnd event.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "shouldEnd",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 227,
            "description": "Called when the gesture enters an ended state.\nCalled before the view receives the End event.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "didEnd",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 235,
            "description": "Called when the gesture enters a cancelled state.\nCalled before the view receives the Cancel event.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "didCancel",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 246,
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 249,
            "description": "If `simultaneously` is true, it blocks the `ApplicationGestureManager` instance.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "blockApplicationGestureManagerIfSimultaneously",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 271,
            "description": "Notify the event to the view and trigger `eventWasRejected` if the view doesn't\nimplement the API or returned false.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "attemptGestureEventDelivery",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 288,
            "description": "Given two Touch objects, this method returns the distance between them.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "distance",
            "return": {
                "description": "Number"
            },
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 311,
            "description": "Given an array of Touch objects, this method returns the midpoint between them.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "centerPointForTouches",
            "return": {
                "description": "Number"
            },
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 336,
            "description": "Allows the gesture to notify a view associated with a gesture\nevent.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_notifyViewOfGestureEvent",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 354,
            "itemtype": "method",
            "name": "toString",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 361,
            "description": "Reset the touches list.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_resetState",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 373,
            "description": "Given a `touchstart` event, updates the list of touches.\nIf the `numberOfRequiredTouches` hasn't been reached yet, it sets the\nWAITING_FOR_TOUCHES state. Otherwise when the gesture is discrete, it\nmoves to a BEGAN state and applies its logic. Continous gestures are setup\nto the POSSIBLE state and execute their `didBecomePossible` method.",
            "itemtype": "method",
            "name": "touchStart",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 424,
            "description": "Given a `touchmove` event, updates the list of touches.\nIt changes the currentState to BEGAN and fires the [gesture]Start\nview method.\nIf the gesture is discrete, the state is POSSIBLE and its `shouldBegin`\nimplementation response true.\nIf the current state is BEGAN or CHANGED and the gesture is continuous,\nit applies the CHANGED state and fires the [gesture]Change view method.",
            "itemtype": "method",
            "name": "touchMove",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 486,
            "description": "Given a `touchend` event, updates the list of touches, manages the event and finally\nresets the `touch` list.\nIf the current state is either BEGAN or CHANGED and `shouldEnd` response is true,\nit changes the state to ENDED, performs `didEnd` method and fires the [gesture]End\nview method.",
            "itemtype": "method",
            "name": "touchEnd",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture.js",
            "line": 520,
            "description": "Given a `touchcancel` event, resets the `touch` list, and when the\ncurrent state is different than CANCEL, set the state to CANCEL, performs\n`didCancel` method and if the gesture is continuous fires the [gesture]Cancel\nview method.",
            "itemtype": "method",
            "name": "touchCancel",
            "class": "Ember.Gesture",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_delegate.js",
            "line": 19,
            "description": "Name of the gestureDelegate.\nThis optional property can be used on gestureOptions\nto assign a gestureDelegate to a specific gesture.",
            "itemtype": "property",
            "name": "name",
            "type": "Array",
            "class": "Ember.GestureDelegate",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_delegate.js",
            "line": 29,
            "description": "Array of `GestureDelegateRule` which can be setup\nwith string path, extended classes or instances.\nIn runtime, they are intented to be checked before\n`GestureDelegate.shouldReceiveTouch` call.",
            "itemtype": "property",
            "name": "rules",
            "type": "Array",
            "class": "Ember.GestureDelegate",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_delegate.js",
            "line": 74,
            "description": "Respond if a gesture recognizer should receive a touch event.",
            "itemtype": "method",
            "name": "shouldReceiveTouch",
            "return": {
                "description": "Boolen"
            },
            "class": "Ember.GestureDelegate",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_delegate_rule.js",
            "line": 15,
            "itemtype": "method",
            "name": "shouldReceiveTouch",
            "class": "Ember.GestureDelegateRule",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_manager.js",
            "line": 27,
            "description": "An array containing all the gesture recognizers associated with a\nview. This is set automatically by `Em.View`.",
            "itemtype": "property",
            "name": "gestures",
            "default": "null",
            "type": "Array",
            "class": "Ember.GestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_manager.js",
            "line": 38,
            "type": "Em.ApplicationGestureManager",
            "itemtype": "property",
            "name": "applicationGestureManager",
            "class": "Ember.GestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_manager.js",
            "line": 50,
            "description": "The Em.View which belongs this `GestureManager` instance.",
            "itemtype": "property",
            "name": "view",
            "type": "Em.View",
            "class": "Ember.GestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_manager.js",
            "line": 58,
            "description": "Relays touchStart events to all the gesture recognizers to the\nspecified view when coordination conditions are satisfied.",
            "itemtype": "method",
            "name": "touchStart",
            "return": {
                "description": "Boolen"
            },
            "class": "Ember.GestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_manager.js",
            "line": 69,
            "description": "Relays touchMove events to all the gesture recognizers to the\nspecified view when coordination conditions are satisfied.",
            "itemtype": "method",
            "name": "touchMove",
            "return": {
                "description": "Boolen"
            },
            "class": "Ember.GestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_manager.js",
            "line": 80,
            "description": "Relays touchEnd events to all the gesture recognizers to the\nspecified view when coordination conditions are satisfied.",
            "itemtype": "method",
            "name": "touchEnd",
            "return": {
                "description": "Boolen"
            },
            "class": "Ember.GestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_manager.js",
            "line": 91,
            "description": "Relays touchCancel events to all the gesture recognizers to the\nspecified view when coordination conditions are satisfied.",
            "itemtype": "method",
            "name": "touchCancel",
            "return": {
                "description": "Boolen"
            },
            "class": "Ember.GestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_manager.js",
            "line": 102,
            "description": "Relays an event to the gesture recognizers. Used internally\nby the touch event listeners. Propagates the event to the parentViews.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_invokeEvent",
            "return": {
                "description": "Boolean"
            },
            "class": "Ember.GestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/gesture_manager.js",
            "line": 186,
            "description": "Iterates all `GestureDelegateRule` instances of the gestureDelegate parameter\nexecuting its shouldReceiveTouch method and return the value whenever\na rule respond with a defined value.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_applyDelegateRules",
            "return": {
                "description": "Boolean"
            },
            "class": "Ember.GestureManager",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/view_ext.js",
            "line": 8,
            "description": "The Em.GestureManager instance which will manage the gestures of the view.\nThis object is automatically created and set at init-time.",
            "default": "null",
            "type": "Array",
            "class": "Ember.TimeoutTouchEvent",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/system/view_ext.js",
            "line": 23,
            "description": "Inspects the properties on the view instance and create gestures if they're\nused.",
            "class": "Ember.TimeoutTouchEvent",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/utils/touch_list.js",
            "line": 18,
            "itemtype": "property",
            "name": "touches",
            "type": "Array",
            "class": "Ember.TouchList",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/utils/touch_list.js",
            "line": 24,
            "itemtype": "property",
            "name": "timestamp",
            "class": "Ember.TouchList",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/utils/touch_list.js",
            "line": 35,
            "description": "Add a touch event to the list.\nThis method is called only in the initialization of\nthe touch session adding touchstart events.",
            "itemtype": "method",
            "name": "addTouch",
            "class": "Ember.TouchList",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/utils/touch_list.js",
            "line": 48,
            "description": "Update a touch event from the list.\nGiven a touch event, it will iterate the current\nlist to replace with the event the item whose\nidentifier is equal to the event identifier.",
            "itemtype": "method",
            "name": "updateTouch",
            "class": "Ember.TouchList",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/utils/touch_list.js",
            "line": 69,
            "description": "Reset the touch list.",
            "itemtype": "method",
            "name": "removeAllTouches",
            "class": "Ember.TouchList",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/utils/touch_list.js",
            "line": 77,
            "description": "Given a touch identifier, it returns the touch event\nwith the same identifier in the list.",
            "itemtype": "method",
            "name": "touchWithId",
            "class": "Ember.TouchList",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        },
        {
            "file": "../packages/ember-touch/lib/utils/touch_list.js",
            "line": 100,
            "description": "Length of the touch list.",
            "itemtype": "property",
            "name": "length",
            "class": "Ember.TouchList",
            "module": "ember",
            "submodule": "ember-touch",
            "namespace": "Ember"
        }
    ]
}