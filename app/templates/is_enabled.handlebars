
<div class="alert alert-info">
  <p>You could manage a gesture recognition based on its <code>isEnabled</code> property. Toggle the button to change values and test the views at the right side.</p>
</div>


<div class="row-fluid">

  {{#view App.IsEnabledButtonView class="span6"
    isEnabledBinding="swipeIsEnabled"}}

    {{#if view.isEnabled}}
      Swipe gesture is enabled
    {{else}}
      Swipe gesture is disabled
    {{/if}}
  {{/view}}

  {{view App.IsEnabledLetterSwipeView class="span6"
    swipeIsEnabledBinding="swipeIsEnabled" }}

</div>

<div class="space"></div>

<div class="row-fluid">



  {{#view App.IsEnabledButtonView class="span6"
    isEnabledBinding="panIsEnabled"}}
    {{#if view.isEnabled}}
      Pan gesture is enabled
    {{else}}
      Pan gesture is disabled
    {{/if}}
  {{/view}}

  {{view App.IsEnabledPanPhotoCanvasView class="span6"
    panIsEnabledBinding="panIsEnabled" }}

</div>


<div class="space is-code"></div>

<div class="row-fluid">

  <div class="span12">
    <span class="label label-info">Code</span>
    <pre>
App.IsEnabledLetterSwipeView = App.LetterSwipeView.extend({
  swipeIsEnabled: null,

  swipeOptions: {
    direction: Em.OneGestureDirection.Left | Em.OneGestureDirection.Right,
    cancelPeriod: 100,
    swipeThreshold: 10,
    <b>isEnabledBinding</b>: 'swipeIsEnabled'
  }

});

App.IsEnabledPanPhotoCanvasView = App.PanPhotoCanvasView.extend({
  panIsEnabled: null,

  panOptions: {
    numberOfRequiredTouches: 1,
    <b>isEnabledBinding</b>: 'panIsEnabled'
  }

});
    </pre>
  </div>
</div>
