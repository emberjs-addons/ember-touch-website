
<div class="alert alert-info">
  Gesture Delegate logic can be composed based on reusable <code>GestureDelegateRule</code> instances. The gesture delegate will iterate the rule list executing the <code>shouldReceiveTouch</code> for each rule, 
  whenever the first rule response with a true/false value, this response will decide to allow/deny redirect the touchEvent to the gesture for being recognized. 
</div>

<div class="row-fluid">
  {{#view App.GestureDelegateRulesButtonView class="span6"
    ruleStateBinding="rule1State"}}
    Rule 1 --> {{view.ruleValue}}
  {{/view}}
  {{view App.GestureDelegateRulesLetterSwipeView class="span6"}}
</div>

<div class="row-fluid">
  {{#view App.GestureDelegateRulesButtonView class="span6"
    ruleStateBinding="rule2State"}}
    Rule 2 --> {{view.ruleValue}}
  {{/view}}
  <div class="alert span6">
    The gesture delegate has applied 4 rules.
  </div> 
</div>

<div class="space"></div>

<div class="row-fluid">
  {{#view App.GestureDelegateRulesButtonView class="span6"
    ruleStateBinding="rule3State"}}
    Rule 3 --> {{view.ruleValue}}
  {{/view}}
  {{view App.GestureDelegateRulesPanPhotoCanvasView class="span6"}}
</div>

<div class="row-fluid">
  {{#view App.GestureDelegateRulesButtonView class="span6"
    ruleStateBinding="rule4State"}}
    Rule 4 --> {{view.ruleValue}}
  {{/view}}
  <div class="alert span6">
    The gesture delegate has applied 2 rules (rule3 and rule4).
  </div> 
</div>

<div class="space is-code"></div>
<div class="row-fluid">

  <div class="span12">
    <span class="label label-info">Code</span>
    <pre>
App.GestureDelegateRule = Em.GestureDelegateRule.extend({
  state: 0,
  shouldReceiveTouch: function(gesture, view, event) {
    var state = this.get('state');
    return (state === 0) ? undefined : (state===1) ? false : true;
  }
});

App.GestureDelegateRule1 = App.GestureDelegateRule.create({
  stateBinding: 'App.router.gestureDelegateRulesController.rule1State'
});
App.GestureDelegateRule2 = App.GestureDelegateRule.create({
  stateBinding: 'App.router.gestureDelegateRulesController.rule2State'
});

App.GestureDelegateRule3 = App.GestureDelegateRule.create({
  stateBinding: 'App.router.gestureDelegateRulesController.rule3State'
});

App.GestureDelegateRule4 = App.GestureDelegateRule.create({
  stateBinding: 'App.router.gestureDelegateRulesController.rule4State'
});



var delegate1 = Em.GestureDelegate.create({
  <b>rules</b>: [App.GestureDelegateRule1, App.GestureDelegateRule2, App.GestureDelegateRule3, App.GestureDelegateRule4]
});

var delegate2 = Em.GestureDelegate.create({
  <b>rules</b>: [App.GestureDelegateRule3, App.GestureDelegateRule4]
});


App.GestureDelegateRulesLetterSwipeView = App.LetterSwipeView.extend({

  swipeOptions: {
    direction: Em.OneGestureDirection.Left | Em.OneGestureDirection.Right,
    cancelPeriod: 100,
    swipeThreshold: 10,
    <b>delegate</b>: delegate1
  }

});

App.GestureDelegateRulesPanPhotoCanvasView = App.PanPhotoCanvasView.extend({

  panOptions: {
    <b>delegate</b>: delegate2
  }

});
    </pre>
  </div>
</div>
