
<div class="alert alert-info">
  <p>Tap and TouchHold buttons and check how the button disabled state is toggled. <br/> <code>TapGestureRecognizer</code> & <code>TouchHoldGestureRecognizer</code></p>
</div>

<div class="row-fluid">

  <div class="span6">
    {{#view App.TapDisabledView class="btn btn-primary btn-large" }}
      Tap Once
    {{/view}}
  </div>

  <div class="span6">
    {{#view App.DoubleTapDisabledView class="btn btn-danger btn-large" }}
      Tap Twice
    {{/view}}
  </div>

</div>

<div class="space"></div>

<div class="row-fluid">

  <div class="span6">
    {{#view App.TouchHoldDisabledView class="btn btn-info btn-large"}}
      Touch and hold for 2 seconds with one finger
    {{/view}}
  </div>

  <div class="span6">
    {{#view App.DoubleTouchHoldDisabledView class="btn btn-warning btn-large"}}
      Touch and hold for 1 second with two fingers
    {{/view}}
  </div>
</div>

<div class="space is-code"></div>

<div class="row-fluid">

  <div class="span12">
    <span class="label label-info">Code</span>
    <pre>
App.TapDisabledView = Em.View.extend(App.disabledClassNameBinding, {

  <b>tapEnd</b>: function () {
    this.toogleDisabled();
  }

});

App.DoubleTapDisabledView = Em.View.extend(App.disabledClassNameBinding,{

  <b>tapOptions</b>: {
    numberOfTaps: 2,
    delayBetweenTaps: 300
  },

  <b>tapEnd</b>: function () {
    this.toogleDisabled();
  }

});

App.TouchHoldDisabledView = Em.View.extend(App.disabledClassNameBinding,{

  touchStart: function(event) {
    event.preventDefault();
  },

  <b>touchHoldEnd</b>: function (recognizer, event) {
    this.toogleDisabled();
  }

});

App.DoubleTouchHoldDisabledView = Em.View.extend(App.disabledClassNameBinding,{

  <b>touchHoldOptions</b>: {
    holdPeriod: 1000,
    numberOfRequiredTouches: 2
  },

  touchStart: function(event) {
    event.preventDefault();
  },

  <b>touchHoldEnd</b>: function (recognizer, event) {
    this.toogleDisabled();
  }

});
    </pre>
  </div>
</div>

