
<div class="alert alert-info">
  A <code>GestureDelegate</code> allows/denies to forward touchEvents to gestures based on its <code>shouldReceiveTouch</code> implementation. The delegate of this example allow the gesture whenever the "button" counter is multiple of 3 (3, 6, 9, 12...)
</div>


<div class="row-fluid">


  <div class="span6">
    {{#view App.GestureDelegateCounterButtonView class="span10"}}
      Increase the counter
    {{/view}}

    <div class="offset1 span1">
      <span class="badge">{{counter}}</span>
    </div>
  </div>


  {{view App.GestureDelegateLetterSwipeView class="span6"}}

</div>

<div class="space"></div>

<div class="row-fluid">

  {{view App.GestureDelegatePanPhotoCanvasView class="offset6 span6"}}

</div>

<div class="space is-code"></div>

<div class="row-fluid">

  <div class="span12">
    <span class="label label-info">Code</span>
    <pre>
var delegate = Em.GestureDelegate.create({
    counterBinding: 'App.router.gestureDelegateController.counter',
    shouldReceiveTouch: function(gesture, view, event) {
      return this.get('counter') === 0 ? false : ( this.get('counter') % 3 ) === 0;
    }
});

App.GestureDelegateLetterSwipeView = App.LetterSwipeView.extend({

  swipeOptions: {
    direction: Em.OneGestureDirection.Left | Em.OneGestureDirection.Right,
    cancelPeriod: 100,
    swipeThreshold: 10,
    <b>delegate</b>: delegate
  }

});

App.GestureDelegatePanPhotoCanvasView = App.PanPhotoCanvasView.extend({

  panOptions: {
    <b>delegate</b>: delegate
  }

});
    </pre>
  </div>
</div>
