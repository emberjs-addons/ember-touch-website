require "rake-pipeline-web-filters"
require "json"
require "uglifier"
require "execjs"

class HandlebarsFilter < Rake::Pipeline::Filter

  def initialize(&block)
    block ||= proc { |input| input.sub(/\.handlebars$/, '.js') }
    super(&block)
  end

  def generate_output(inputs, output)

    inputs.each do |input|
      name = File.basename(input.path, '.handlebars')
      output.write "Ember.TEMPLATES['#{name}'] =  Ember.Handlebars.compile(#{input.read.to_json});\n"
    end

  end
end

class AddMicroLoaderFilter < Rake::Pipeline::Filter

  LOADER = File.expand_path("../app/submodules/ember.js/packages/loader/lib/main.js", __FILE__)

  def initialize(options={}, &block)
    super(&block)
    @global = options[:global]
  end

  def generate_output(inputs, output)
    output.write "(function() {\n" unless @global

    output.write File.read(LOADER)

    inputs.each do |input|
      output.write input.read
    end

    output.write "\n})();\n" unless @global
  end

  def additional_dependencies(input)
    [ LOADER ]
  end
end


output "public/source"


input "app" do

  match "styles/public/*.css" do
    concat "app.css"
	end

  match "styles/common/*.css" do
    concat "app.css"
	end

  match "styles/externals/*.css" do
    concat "app.css"
	end

	match "templates/**/*.handlebars" do
		filter HandlebarsFilter
		minispade :rewrite_requires => true, :string=> false, :module_id_generator => proc { |input|
			id = input.path.dup
			id.sub!(/\.js$/, '')
			id
		}
		filter ConcatFilter, "app.js"
	end

	match "app/lib/**/*.js" do
		minispade :rewrite_requires => true, :string=> false, :module_id_generator => proc { |input|
			id = input.path.dup
			id.sub!('/lib/', '/')
			id.sub!(/\.js$/, '')
			id.sub!(/\/main$/, '')
			id
		}

		concat "app.js"
	end

	match "submodules/ember-touch/packages/ember-touch/lib/**/.js" do
		minispade :rewrite_requires => true, :string=> false, :module_id_generator => proc { |input|
			id = input.path.dup
			id.sub!('submodules/', '')
			id.sub!(/[a-z\-\.]+\//, '')
			id.sub!('packages/', '')
			id.sub!('/lib/', '/')
			id.sub!(/\.js$/, '')
			id.sub!(/\/main$/, '')
			id
		}

	 concat "app.js"
	end

	match "submodules/ember.js/packages/*/lib/**/.js" do
		minispade :rewrite_requires => true, :string=> false, :module_id_generator => proc { |input|
			id = input.path.dup
			id.sub!('submodules/', '')
			id.sub!(/[a-z\-\.]+\//, '')
			id.sub!('packages/', '')
			id.sub!('/lib/', '/')
			id.sub!(/\.js$/, '')
			id.sub!(/\/main$/, '')
			id
		}

	 concat "app.js"
   filter AddMicroLoaderFilter, :global => true
	end

	match "vendor/*" do
		filter ConcatFilter, "app.js"
	end

end


# vim: filetype=ruby
